-- Structure
DROP TABLE t_transaction;
DROP TABLE t_account;

CREATE TABLE t_account
(
 id INT(4) NOT NULL PRIMARY KEY,
 user_name VARCHAR(30) NOT NULL,
 balance DECIMAL(10,2) DEFAULT 0,
 created_at DATETIME
);

CREATE TABLE t_transaction
(
 id INT(6) NOT NULL PRIMARY KEY,
 user_id INT(4) NOT NULL,
 amount DECIMAL(10,2) DEFAULT 0,
 transaction_type VARCHAR(1), -- D-Deposit, W-Withdraw 
 transaction_time DATETIME,
 CONSTRAINT fk_transaction FOREIGN KEY (user_id) REFERENCES t_account (id) ON UPDATE CASCADE ON DELETE CASCADE 
);


-- Stored Procedure
DELIMITER //
DROP PROCEDURE IF EXISTS prc_update_balance; //
CREATE PROCEDURE prc_update_balance( IN v_userid INT(4), IN v_transactiontype VARCHAR(1), IN d_amount DECIMAL(10,2), OUT od_balance DECIMAL(10,2) )
BEGIN
  DECLARE l_amount DECIMAL(10,2);

  IF v_transactiontype = 'W' THEN
    SET l_amount = 0 - d_amount; 
  ELSE
    SET l_amount = d_amount; 
  END IF;

  INSERT INTO t_transaction (id, user_id, amount, transaction_type, transaction_time)
    VALUES ( round(rand() * 1000000), v_userid, l_amount, v_transactiontype, NOW() );

  UPDATE t_account 
    SET balance = balance + l_amount
    WHERE id = v_userid;

  COMMIT;

  SELECT balance INTO od_balance FROM t_account WHERE id = v_userid;
 
END //

-- Test
-- CALL prc_update_balance(7710,'D',100.50,@a);
-- SELECT @a;

-- Data
INSERT INTO t_account (id, user_name, balance, created_at)
  VALUES ( round(rand()*10000), 'John Smith', 10000, NOW());

INSERT INTO t_account (id, user_name, balance, created_at)
  VALUES ( round(rand()*10000), 'Mary Rose', 9000, NOW());

COMMIT;

INSERT INTO t_transaction (id, user_id, amount, transaction_type, transaction_time)
  VALUES ( round(rand() * 1000000), 6271, 50, 'W', NOW() );

INSERT INTO t_transaction (id, user_id, amount, transaction_type, transaction_time)
  VALUES ( round(rand() * 1000000), 6271, 100, 'D', NOW() );

INSERT INTO t_transaction (id, user_id, amount, transaction_type, transaction_time)
  VALUES ( round(rand() * 1000000), 7710, 20, 'W', NOW() );

COMMIT;